from datetime import datetime, timedelta
import pytz
from langchain.tools import tool
from googleapiclient.errors import HttpError
from google_auth import get_calendar_service

@tool
def list_upcoming_events(n: int = 10) -> str:
    """
    Li·ªát k√™ n s·ª± ki·ªán s·∫Øp t·ªõi t·ª´ Google Calendar.
    
    Args:
        n (int): S·ªë l∆∞·ª£ng s·ª± ki·ªán mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh 10, t·ªëi ƒëa 50)
        
    Returns:
        str: Danh s√°ch c√°c s·ª± ki·ªán s·∫Øp t·ªõi
    """
    try:
        service = get_calendar_service()
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng s·ª± ki·ªán
        n = min(max(n, 1), 50)
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i
        now = datetime.utcnow().isoformat() + 'Z'
        
        # G·ªçi Calendar API
        events_result = service.events().list(
            calendarId='primary',
            timeMin=now,
            maxResults=n,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        
        if not events:
            return f"Kh√¥ng c√≥ s·ª± ki·ªán n√†o s·∫Øp t·ªõi trong l·ªãch c·ªßa b·∫°n."
        
        result = f"üìÖ {len(events)} s·ª± ki·ªán s·∫Øp t·ªõi:\n\n"
        
        for i, event in enumerate(events, 1):
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event.get('summary', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
            
            # X·ª≠ l√Ω th·ªùi gian
            if 'T' in start:  # Event c√≥ th·ªùi gian c·ª• th·ªÉ
                dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                # Chuy·ªÉn ƒë·ªïi sang m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
                local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                dt_local = dt.astimezone(local_tz)
                time_str = dt_local.strftime('%d/%m/%Y %H:%M')
            else:  # Event c·∫£ ng√†y
                dt = datetime.fromisoformat(start)
                time_str = dt.strftime('%d/%m/%Y (C·∫£ ng√†y)')
            
            # Th√™m m√¥ t·∫£ n·∫øu c√≥
            description = event.get('description', '')
            location = event.get('location', '')
            
            result += f"{i}. üìù {summary}\n"
            result += f"   ‚è∞ {time_str}\n"
            if location:
                result += f"   üìç {location}\n"
            if description:
                result += f"   üìÑ {description[:100]}{'...' if len(description) > 100 else ''}\n"
            result += "\n"
        
        return result.strip()
        
    except HttpError as error:
        return f"L·ªói khi truy c·∫≠p Google Calendar: {error}"
    except Exception as error:
        return f"ƒê√£ x·∫£y ra l·ªói: {error}"

@tool
def create_calendar_event(summary: str, start_time: str, end_time: str, description: str = "", location: str = "") -> str:
    """
    T·∫°o m·ªôt s·ª± ki·ªán m·ªõi trong Google Calendar.
    
    Args:
        summary (str): Ti√™u ƒë·ªÅ c·ªßa s·ª± ki·ªán
        start_time (str): Th·ªùi gian b·∫Øt ƒë·∫ßu (ƒë·ªãnh d·∫°ng: 'YYYY-MM-DD HH:MM' ho·∫∑c 'YYYY-MM-DD')
        end_time (str): Th·ªùi gian k·∫øt th√∫c (ƒë·ªãnh d·∫°ng: 'YYYY-MM-DD HH:MM' ho·∫∑c 'YYYY-MM-DD')
        description (str, optional): M√¥ t·∫£ chi ti·∫øt c·ªßa s·ª± ki·ªán
        location (str, optional): ƒê·ªãa ƒëi·ªÉm t·ªï ch·ª©c s·ª± ki·ªán
        
    Returns:
        str: K·∫øt qu·∫£ t·∫°o s·ª± ki·ªán
    """
    try:
        service = get_calendar_service()
        
        # X·ª≠ l√Ω th·ªùi gian
        def parse_datetime(time_str):
            """Parse datetime string and return appropriate format for Google Calendar"""
            try:
                # Th·ª≠ parse v·ªõi gi·ªù:ph√∫t
                if len(time_str.split()) == 2:
                    dt = datetime.strptime(time_str, '%Y-%m-%d %H:%M')
                    # Chuy·ªÉn sang UTC
                    local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                    dt_local = local_tz.localize(dt)
                    dt_utc = dt_local.astimezone(pytz.UTC)
                    return {
                        'dateTime': dt_utc.isoformat(),
                        'timeZone': 'UTC'
                    }
                else:
                    # Event c·∫£ ng√†y
                    dt = datetime.strptime(time_str, '%Y-%m-%d')
                    return {
                        'date': dt.strftime('%Y-%m-%d')
                    }
            except ValueError:
                raise ValueError(f"ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá: {time_str}. S·ª≠ d·ª•ng 'YYYY-MM-DD HH:MM' ho·∫∑c 'YYYY-MM-DD'")
        
        start_parsed = parse_datetime(start_time)
        end_parsed = parse_datetime(end_time)
        
        # T·∫°o event object
        event = {
            'summary': summary,
            'start': start_parsed,
            'end': end_parsed,
        }
        
        if description:
            event['description'] = description
        if location:
            event['location'] = location
        
        # T·∫°o s·ª± ki·ªán
        created_event = service.events().insert(
            calendarId='primary',
            body=event
        ).execute()
        
        # Format response
        result = f"‚úÖ ƒê√£ t·∫°o s·ª± ki·ªán th√†nh c√¥ng!\n\n"
        result += f"üìù Ti√™u ƒë·ªÅ: {summary}\n"
        result += f"‚è∞ B·∫Øt ƒë·∫ßu: {start_time}\n"
        result += f"‚è∞ K·∫øt th√∫c: {end_time}\n"
        
        if location:
            result += f"üìç ƒê·ªãa ƒëi·ªÉm: {location}\n"
        if description:
            result += f"üìÑ M√¥ t·∫£: {description}\n"
        
        result += f"\nüîó Link: {created_event.get('htmlLink', 'Kh√¥ng c√≥')}"
        
        return result
        
    except HttpError as error:
        return f"L·ªói khi t·∫°o s·ª± ki·ªán: {error}"
    except ValueError as error:
        return f"L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o: {error}"
    except Exception as error:
        return f"ƒê√£ x·∫£y ra l·ªói: {error}"

@tool
def delete_calendar_event(event_summary: str) -> str:
    """
    X√≥a s·ª± ki·ªán kh·ªèi Google Calendar d·ª±a tr√™n ti√™u ƒë·ªÅ.
    
    Args:
        event_summary (str): Ti√™u ƒë·ªÅ c·ªßa s·ª± ki·ªán c·∫ßn x√≥a
        
    Returns:
        str: K·∫øt qu·∫£ x√≥a s·ª± ki·ªán
    """
    try:
        service = get_calendar_service()
        
        # T√¨m s·ª± ki·ªán
        now = datetime.utcnow().isoformat() + 'Z'
        events_result = service.events().list(
            calendarId='primary',
            timeMin=now,
            maxResults=50,
            singleEvents=True,
            orderBy='startTime',
            q=event_summary
        ).execute()
        
        events = events_result.get('items', [])
        
        if not events:
            return f"‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o v·ªõi ti√™u ƒë·ªÅ '{event_summary}'"
        
        # N·∫øu c√≥ nhi·ªÅu s·ª± ki·ªán, x√≥a s·ª± ki·ªán ƒë·∫ßu ti√™n t√¨m th·∫•y
        event_to_delete = events[0]
        
        # X√≥a s·ª± ki·ªán
        service.events().delete(
            calendarId='primary',
            eventId=event_to_delete['id']
        ).execute()
        
        start = event_to_delete['start'].get('dateTime', event_to_delete['start'].get('date'))
        
        result = f"‚úÖ ƒê√£ x√≥a s·ª± ki·ªán th√†nh c√¥ng!\n\n"
        result += f"üìù Ti√™u ƒë·ªÅ: {event_to_delete.get('summary', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}\n"
        result += f"‚è∞ Th·ªùi gian: {start}\n"
        
        if len(events) > 1:
            result += f"\n‚ö†Ô∏è L∆∞u √Ω: T√¨m th·∫•y {len(events)} s·ª± ki·ªán t∆∞∆°ng t·ª±, ƒë√£ x√≥a s·ª± ki·ªán ƒë·∫ßu ti√™n."
        
        return result
        
    except HttpError as error:
        return f"L·ªói khi x√≥a s·ª± ki·ªán: {error}"
    except Exception as error:
        return f"ƒê√£ x·∫£y ra l·ªói: {error}"

@tool  
def search_calendar_events(query: str, max_results: int = 10) -> str:
    """
    T√¨m ki·∫øm s·ª± ki·ªán trong Google Calendar.
    
    Args:
        query (str): T·ª´ kh√≥a t√¨m ki·∫øm
        max_results (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 10)
        
    Returns:
        str: Danh s√°ch s·ª± ki·ªán t√¨m th·∫•y
    """
    try:
        service = get_calendar_service()
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k·∫øt qu·∫£
        max_results = min(max(max_results, 1), 50)
        
        # T√¨m ki·∫øm s·ª± ki·ªán
        events_result = service.events().list(
            calendarId='primary',
            maxResults=max_results,
            singleEvents=True,
            orderBy='startTime',
            q=query
        ).execute()
        
        events = events_result.get('items', [])
        
        if not events:
            return f"üîç Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o v·ªõi t·ª´ kh√≥a '{query}'"
        
        result = f"üîç T√¨m th·∫•y {len(events)} s·ª± ki·ªán v·ªõi t·ª´ kh√≥a '{query}':\n\n"
        
        for i, event in enumerate(events, 1):
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event.get('summary', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
            
            # X·ª≠ l√Ω th·ªùi gian
            if 'T' in start:  # Event c√≥ th·ªùi gian c·ª• th·ªÉ
                dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
                dt_local = dt.astimezone(local_tz)
                time_str = dt_local.strftime('%d/%m/%Y %H:%M')
            else:  # Event c·∫£ ng√†y
                dt = datetime.fromisoformat(start)
                time_str = dt.strftime('%d/%m/%Y (C·∫£ ng√†y)')
            
            result += f"{i}. üìù {summary}\n"
            result += f"   ‚è∞ {time_str}\n"
            
            location = event.get('location', '')
            if location:
                result += f"   üìç {location}\n"
            
            result += "\n"
        
        return result.strip()
        
    except HttpError as error:
        return f"L·ªói khi t√¨m ki·∫øm: {error}"
    except Exception as error:
        return f"ƒê√£ x·∫£y ra l·ªói: {error}"

@tool
def get_events_by_date(date: str) -> str:
    """
    L·∫•y t·∫•t c·∫£ s·ª± ki·ªán trong m·ªôt ng√†y c·ª• th·ªÉ.
    
    Args:
        date (str): Ng√†y c·∫ßn t√¨m ki·∫øm (ƒë·ªãnh d·∫°ng: 'YYYY-MM-DD' ho·∫∑c 'DD/MM/YYYY')
        
    Returns:
        str: Danh s√°ch c√°c s·ª± ki·ªán trong ng√†y ƒë√≥
    """
    try:
        service = get_calendar_service()
        
        # Parse v√† chu·∫©n h√≥a ng√†y
        def parse_date(date_str):
            """Parse various date formats"""
            try:
                # Th·ª≠ format DD/MM/YYYY
                if '/' in date_str:
                    day, month, year = date_str.split('/')
                    return datetime(int(year), int(month), int(day))
                # Th·ª≠ format YYYY-MM-DD
                elif '-' in date_str:
                    year, month, day = date_str.split('-')
                    return datetime(int(year), int(month), int(day))
                else:
                    raise ValueError("Invalid date format")
            except:
                raise ValueError(f"Kh√¥ng th·ªÉ parse ng√†y '{date_str}'. Vui l√≤ng s·ª≠ d·ª•ng format 'YYYY-MM-DD' ho·∫∑c 'DD/MM/YYYY'")
        
        target_date = parse_date(date)
        
        # T·∫°o th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c cho ng√†y ƒë√≥
        start_of_day = target_date.replace(hour=0, minute=0, second=0, microsecond=0)
        end_of_day = target_date.replace(hour=23, minute=59, second=59, microsecond=999999)
        
        # Chuy·ªÉn ƒë·ªïi sang UTC ƒë·ªÉ g·ªçi API
        local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        
        # N·∫øu ng√†y kh√¥ng c√≥ timezone info, coi nh∆∞ m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
        if start_of_day.tzinfo is None:
            start_of_day = local_tz.localize(start_of_day)
            end_of_day = local_tz.localize(end_of_day)
        
        start_utc = start_of_day.astimezone(pytz.UTC)
        end_utc = end_of_day.astimezone(pytz.UTC)
        
        # G·ªçi Calendar API
        events_result = service.events().list(
            calendarId='primary',
            timeMin=start_utc.isoformat(),
            timeMax=end_utc.isoformat(),
            maxResults=50,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        
        if not events:
            return f"üìÖ Kh√¥ng c√≥ s·ª± ki·ªán n√†o v√†o ng√†y {target_date.strftime('%d/%m/%Y')}"
        
        result = f"üìÖ **L·ªãch tr√¨nh ng√†y {target_date.strftime('%d/%m/%Y')}** ({len(events)} s·ª± ki·ªán):\n\n"
        
        for i, event in enumerate(events, 1):
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event.get('summary', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')
            
            # X·ª≠ l√Ω th·ªùi gian
            if 'T' in start:  # Event c√≥ th·ªùi gian c·ª• th·ªÉ
                dt = datetime.fromisoformat(start.replace('Z', '+00:00'))
                dt_local = dt.astimezone(local_tz)
                time_str = dt_local.strftime('%H:%M')
            else:  # Event c·∫£ ng√†y
                time_str = "C·∫£ ng√†y"
            
            # Th√™m th√¥ng tin chi ti·∫øt
            description = event.get('description', '')
            location = event.get('location', '')
            
            result += f"{i}. üìù **{summary}**\n"
            result += f"   ‚è∞ {time_str}\n"
            if location:
                result += f"   üìç {location}\n"
            if description:
                # Hi·ªÉn th·ªã m√¥ t·∫£ ng·∫Øn g·ªçn
                desc_short = description.replace('\n', ' ').strip()
                if len(desc_short) > 150:
                    desc_short = desc_short[:150] + "..."
                result += f"   üìÑ {desc_short}\n"
            result += "\n"
        
        return result.strip()
        
    except ValueError as ve:
        return f"‚ùå L·ªói ƒë·ªãnh d·∫°ng ng√†y: {str(ve)}"
    except HttpError as error:
        return f"‚ùå L·ªói khi truy c·∫≠p Google Calendar: {error}"
    except Exception as error:
        return f"‚ùå ƒê√£ x·∫£y ra l·ªói: {error}"

@tool
def get_tomorrow_events() -> str:
    """
    L·∫•y t·∫•t c·∫£ s·ª± ki·ªán c·ªßa ng√†y mai.
    Tool n√†y t·ª± ƒë·ªông t√≠nh to√°n ng√†y mai d·ª±a tr√™n m√∫i gi·ªù Vi·ªát Nam.
    
    Returns:
        str: Danh s√°ch c√°c s·ª± ki·ªán ng√†y mai
    """
    try:
        # T√≠nh to√°n ng√†y mai
        local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(local_tz)
        tomorrow = now + timedelta(days=1)
        tomorrow_str = tomorrow.strftime('%Y-%m-%d')
        
        # G·ªçi tool get_events_by_date v·ªõi ng√†y mai
        return get_events_by_date(tomorrow_str)
        
    except Exception as error:
        return f"‚ùå L·ªói khi l·∫•y l·ªãch ng√†y mai: {error}"

@tool  
def get_today_events() -> str:
    """
    L·∫•y t·∫•t c·∫£ s·ª± ki·ªán c·ªßa h√¥m nay.
    Tool n√†y t·ª± ƒë·ªông l·∫•y ng√†y hi·ªán t·∫°i d·ª±a tr√™n m√∫i gi·ªù Vi·ªát Nam.
    
    Returns:
        str: Danh s√°ch c√°c s·ª± ki·ªán h√¥m nay
    """
    try:
        # T√≠nh to√°n ng√†y h√¥m nay
        local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        today = datetime.now(local_tz)
        today_str = today.strftime('%Y-%m-%d')
        
        # G·ªçi tool get_events_by_date v·ªõi ng√†y h√¥m nay
        return get_events_by_date(today_str)
        
    except Exception as error:
        return f"‚ùå L·ªói khi l·∫•y l·ªãch h√¥m nay: {error}"

@tool
def get_current_datetime() -> str:
    """
    L·∫•y th√¥ng tin ng√†y gi·ªù hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam.
    Tool n√†y gi√∫p AI agent bi·∫øt ƒë∆∞·ª£c th·ªùi gian c·ª• th·ªÉ ƒë·ªÉ x·ª≠ l√Ω c√°c c√¢u h·ªèi v·ªÅ th·ªùi gian.
    
    Returns:
        str: Th√¥ng tin chi ti·∫øt v·ªÅ ng√†y gi·ªù hi·ªán t·∫°i
    """
    try:
        # L·∫•y th·ªùi gian theo m√∫i gi·ªù Vi·ªát Nam
        local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        now = datetime.now(local_tz)
        
        # L·∫•y th·ªùi gian UTC
        utc_now = datetime.utcnow().replace(tzinfo=pytz.UTC)
        
        # Format th√¥ng tin chi ti·∫øt
        result = f"""üìÖ **Th√¥ng tin th·ªùi gian hi·ªán t·∫°i:**

üáªüá≥ **M√∫i gi·ªù Vi·ªát Nam (UTC+7):**
- Ng√†y: {now.strftime('%A, %d/%m/%Y')}
- Th·ªùi gian: {now.strftime('%H:%M:%S')}
- Tu·∫ßn: Tu·∫ßn {now.isocalendar()[1]} c·ªßa nƒÉm {now.year}
- Th√°ng: Th√°ng {now.month}/2025

üåç **Th·ªùi gian UTC:**
- Ng√†y: {utc_now.strftime('%A, %d/%m/%Y')}
- Th·ªùi gian: {utc_now.strftime('%H:%M:%S')} UTC

üìä **Th√¥ng tin b·ªï sung:**
- M√∫i gi·ªù: {now.tzname()} ({now.strftime('%z')})
- NƒÉm nhu·∫≠n: {'C√≥' if now.year % 4 == 0 and (now.year % 100 != 0 or now.year % 400 == 0) else 'Kh√¥ng'}
- Ng√†y trong nƒÉm: {now.timetuple().tm_yday}/365

üí° **Ghi ch√∫:** Th√¥ng tin n√†y gi√∫p b·∫°n bi·∫øt ch√≠nh x√°c th·ªùi gian ƒë·ªÉ:
- T√≠nh to√°n "ng√†y mai" = {(now + timedelta(days=1)).strftime('%d/%m/%Y')}
- T√≠nh to√°n "h√¥m qua" = {(now - timedelta(days=1)).strftime('%d/%m/%Y')}
- X√°c ƒë·ªãnh th·ªùi gian cho vi·ªác t·∫°o s·ª± ki·ªán calendar
"""
        
        return result.strip()
        
    except Exception as error:
        return f"‚ùå L·ªói khi l·∫•y th√¥ng tin th·ªùi gian: {error}"

@tool
def get_today_info() -> str:
    """
    L·∫•y th√¥ng tin c∆° b·∫£n v·ªÅ ng√†y h√¥m nay d∆∞·ªõi d·∫°ng structured data.
    Tool n√†y cung c·∫•p th√¥ng tin ng·∫Øn g·ªçn v·ªÅ ng√†y hi·ªán t·∫°i cho AI agent.
    
    Returns:
        str: Th√¥ng tin ng√†y h√¥m nay d∆∞·ªõi d·∫°ng JSON-like
    """
    try:
        local_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        today = datetime.now(local_tz)
        
        # T√™n c√°c ng√†y trong tu·∫ßn b·∫±ng ti·∫øng Vi·ªát
        weekdays_vn = {
            'Monday': 'Th·ª© Hai',
            'Tuesday': 'Th·ª© Ba', 
            'Wednesday': 'Th·ª© T∆∞',
            'Thursday': 'Th·ª© NƒÉm',
            'Friday': 'Th·ª© S√°u',
            'Saturday': 'Th·ª© B·∫£y',
            'Sunday': 'Ch·ªß Nh·∫≠t'
        }
        
        weekday_en = today.strftime('%A')
        weekday_vn = weekdays_vn.get(weekday_en, weekday_en)
        
        result = f"""Today's Information:
- Date: {today.strftime('%Y-%m-%d')} ({today.strftime('%d/%m/%Y')})
- Day: {weekday_vn} ({weekday_en})
- Time: {today.strftime('%H:%M:%S')}
- Timezone: Asia/Ho_Chi_Minh (UTC+7)
- Tomorrow: {(today + timedelta(days=1)).strftime('%Y-%m-%d')} ({(today + timedelta(days=1)).strftime('%d/%m/%Y')})
- Yesterday: {(today - timedelta(days=1)).strftime('%Y-%m-%d')} ({(today - timedelta(days=1)).strftime('%d/%m/%Y')})

Note: Use this information to understand relative dates like "today", "tomorrow", "yesterday" in user requests."""
        
        return result.strip()
        
    except Exception as error:
        return f"Error getting today's info: {error}"
