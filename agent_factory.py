from langchain_openai import ChatOpenAI
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import create_openai_tools_agent, AgentExecutor
from langchain.prompts import ChatPromptTemplate
from weather_tools import get_current_weather
from calendar_tools import (
    list_upcoming_events,
    create_calendar_event,
    delete_calendar_event,
    search_calendar_events,
    get_events_by_date,
    get_tomorrow_events,
    get_today_events,
    get_current_datetime,
    get_today_info
)
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def create_agent(model_choice: str = "gpt", enable_calendar: bool = False):
    """
    T·∫°o v√† tr·∫£ v·ªÅ AI agent v·ªõi model v√† tools ƒë∆∞·ª£c ch·ªçn
    
    Args:
        model_choice (str): "gpt" ho·∫∑c "gemini"
        enable_calendar (bool): C√≥ b·∫≠t t√≠nh nƒÉng calendar kh√¥ng
        
    Returns:
        AgentExecutor: Agent executor object
    """
    
    # Initialize the LLM based on choice
    if model_choice.lower() == "gemini":
        if not os.getenv('GOOGLE_API_KEY'):
            raise ValueError("GOOGLE_API_KEY not found in environment variables")
        llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            temperature=0,
            google_api_key=os.getenv('GOOGLE_API_KEY')
        )
    else:  # Default to GPT
        if not os.getenv('OPENAI_API_KEY'):
            raise ValueError("OPENAI_API_KEY not found in environment variables")
        llm = ChatOpenAI(
            model="gpt-4o",
            temperature=0
        )
    
    # Define tools based on enabled features
    tools = [get_current_weather, get_current_datetime, get_today_info]
    
    if enable_calendar:
        try:
            # Test calendar connection
            from google_auth import get_calendar_service
            get_calendar_service()
            tools.extend([
                list_upcoming_events,
                create_calendar_event,
                delete_calendar_event,
                search_calendar_events,
                get_events_by_date,
                get_tomorrow_events,
                get_today_events
            ])
        except Exception as e:
            raise Exception(f"L·ªói k·∫øt n·ªëi Google Calendar: {str(e)}")
    
    # Create system prompt
    calendar_features = """
    
    üìÖ **T√≠nh nƒÉng Calendar (ƒë√£ k√≠ch ho·∫°t):**
    - Xem danh s√°ch s·ª± ki·ªán s·∫Øp t·ªõi: `list_upcoming_events()`
    - Xem s·ª± ki·ªán theo ng√†y c·ª• th·ªÉ: `get_events_by_date(date)` 
    - T·∫°o s·ª± ki·ªán m·ªõi: `create_calendar_event()`
    - X√≥a s·ª± ki·ªán: `delete_calendar_event()`
    - T√¨m ki·∫øm s·ª± ki·ªán: `search_calendar_events()`
    
    **X·ª≠ l√Ω y√™u c·∫ßu theo ng√†y:**
    - "ng√†y mai", "tomorrow" ‚Üí t√≠nh to√°n ng√†y ti·∫øp theo v√† d√πng get_events_by_date()
    - "ng√†y 30/6/2025", "2025-06-30" ‚Üí d√πng get_events_by_date() v·ªõi ng√†y c·ª• th·ªÉ
    - "tu·∫ßn n√†y", "th√°ng n√†y" ‚Üí d√πng list_upcoming_events() v·ªõi s·ªë l∆∞·ª£ng ph√π h·ª£p
    
    **ƒê·ªãnh d·∫°ng ng√†y h·ªó tr·ª£:**
    - 'YYYY-MM-DD' (v√≠ d·ª•: '2025-06-30')  
    - 'DD/MM/YYYY' (v√≠ d·ª•: '30/06/2025')
    - M√∫i gi·ªù m·∫∑c ƒë·ªãnh: Asia/Ho_Chi_Minh (UTC+7)
    """ if enable_calendar else ""
    
    system_prompt = f"""
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† hi·ªáu qu·∫£ v·ªõi c√°c t√≠nh nƒÉng sau:
    
    üå§Ô∏è **T√≠nh nƒÉng Weather (lu√¥n c√≥ s·∫µn):**
    - Ki·ªÉm tra th·ªùi ti·∫øt hi·ªán t·∫°i c·ªßa b·∫•t k·ª≥ th√†nh ph·ªë n√†o tr√™n th·∫ø gi·ªõi
    - Hi·ªÉn th·ªã nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, t·ªëc ƒë·ªô gi√≥ v√† m√¥ t·∫£ th·ªùi ti·∫øt
    
    üìÖ **T√≠nh nƒÉng DateTime (lu√¥n c√≥ s·∫µn):**
    - X√°c ƒë·ªãnh ng√†y gi·ªù hi·ªán t·∫°i: `get_current_datetime()` v√† `get_today_info()`
    - Bi·∫øt ch√≠nh x√°c ng√†y h√¥m nay ƒë·ªÉ x·ª≠ l√Ω c√°c c√¢u h·ªèi v·ªÅ th·ªùi gian
    - T√≠nh to√°n ng√†y mai, h√¥m qua, v√† c√°c ng√†y t∆∞∆°ng ƒë·ªëi kh√°c
    {calendar_features}
    
    **Model ƒëang s·ª≠ d·ª•ng:** {model_choice.upper()}
    
    **QUAN TR·ªåNG - X·ª≠ l√Ω th·ªùi gian:**
    1. LU√îN s·ª≠ d·ª•ng `get_today_info()` ƒë·∫ßu ti√™n khi c·∫ßn bi·∫øt ng√†y hi·ªán t·∫°i
    2. Khi user h·ªèi v·ªÅ "ng√†y mai", "h√¥m nay", "h√¥m qua" ‚Üí d√πng th√¥ng tin t·ª´ get_today_info()
    3. Khi user h·ªèi v·ªÅ ng√†y c·ª• th·ªÉ (v√≠ d·ª•: "30/6/2025"), d√πng get_events_by_date() v·ªõi ng√†y ƒë√≥
    4. M√∫i gi·ªù m·∫∑c ƒë·ªãnh: Asia/Ho_Chi_Minh (UTC+7)
    5. Hi·ªÉu c√°c format ng√†y: DD/MM/YYYY, YYYY-MM-DD, "ng√†y mai", v.v.
    
    **Nguy√™n t·∫Øc tr·∫£ l·ªùi:**
    - Tr·∫£ l·ªùi tr·ª±c ti·∫øp, kh√¥ng h·ªèi qu√° nhi·ªÅu
    - S·ª≠ d·ª•ng tools ngay khi c√≥ ƒë·ªß th√¥ng tin  
    - N·∫øu thi·∫øu th√¥ng tin quan tr·ªçng, h·ªèi c·ª• th·ªÉ v√† ng·∫Øn g·ªçn
    - Lu√¥n cung c·∫•p k·∫øt qu·∫£ h·ªØu √≠ch cho user
    
    H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, chi ti·∫øt v√† h·ªØu √≠ch!
    """
    
    # Create prompt template
    prompt = ChatPromptTemplate.from_messages([
        ("system", system_prompt),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}")
    ])
    
    # Create agent
    agent = create_openai_tools_agent(llm, tools, prompt)
    
    # Create agent executor
    agent_executor = AgentExecutor(
        agent=agent, 
        tools=tools, 
        verbose=False,  # Set to False for cleaner Streamlit output
        handle_parsing_errors=True
    )
    
    return agent_executor
