import os
import pickle
from datetime import datetime, timedelta
import pytz
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Google Calendar API scopes
SCOPES = ['https://www.googleapis.com/auth/calendar']

def authenticate_google():
    """
    X·ª≠ l√Ω x√°c th·ª±c Google OAuth 2.0 v√† tr·∫£ v·ªÅ service object ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Google Calendar API.
    
    Returns:
        service: Google Calendar API service object
    """
    creds = None
    token_file = os.getenv('GOOGLE_TOKEN_FILE', 'token.pickle')
    credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    
    # Ki·ªÉm tra xem c√≥ token ƒë√£ l∆∞u t·ª´ l·∫ßn ch·∫°y tr∆∞·ªõc kh√¥ng
    if os.path.exists(token_file):
        with open(token_file, 'rb') as token:
            try:
                creds = pickle.load(token)
            except Exception:
                # N·∫øu token b·ªã l·ªói, x√≥a n√≥ v√† t·∫°o m·ªõi
                os.remove(token_file)
                creds = None
    
    # N·∫øu kh√¥ng c√≥ credentials h·ª£p l·ªá, y√™u c·∫ßu ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
            except Exception:
                # N·∫øu refresh th·∫•t b·∫°i, x√≥a token v√† y√™u c·∫ßu ƒëƒÉng nh·∫≠p l·∫°i
                if os.path.exists(token_file):
                    os.remove(token_file)
                creds = None
        
        if not creds:
            if not os.path.exists(credentials_file):
                raise FileNotFoundError(
                    f"Kh√¥ng t√¨m th·∫•y file {credentials_file}. "
                    "Vui l√≤ng t·∫£i xu·ªëng credentials.json t·ª´ Google Cloud Console "
                    "v√† ƒë·∫∑t n√≥ trong th∆∞ m·ª•c d·ª± √°n."
                )
            
            try:
                flow = InstalledAppFlow.from_client_secrets_file(
                    credentials_file, SCOPES)
                
                # Th·ª≠ nhi·ªÅu port kh√°c nhau ƒë·ªÉ tr√°nh xung ƒë·ªôt
                for port in [8080, 8090, 8888, 9090]:
                    try:
                        creds = flow.run_local_server(port=port, open_browser=True)
                        break
                    except OSError:
                        continue
                else:
                    # N·∫øu t·∫•t c·∫£ port ƒë·ªÅu b·ªã chi·∫øm, s·ª≠ d·ª•ng port ng·∫´u nhi√™n
                    creds = flow.run_local_server(port=0, open_browser=True)
                    
            except Exception as e:
                error_msg = str(e).lower()
                
                if any(keyword in error_msg for keyword in ["invalid_request", "access blocked", "access_denied"]):
                    raise Exception(
                        "‚ùå Google OAuth Error: Truy c·∫≠p b·ªã ch·∫∑n\n\n"
                        "üîß C√ÅCH KH·∫ÆC PH·ª§C CHI TI·∫æT:\n\n"
                        "1Ô∏è‚É£ KI·ªÇM TRA OAUTH CONSENT SCREEN:\n"
                        "   ‚Ä¢ Truy c·∫≠p: https://console.cloud.google.com/apis/credentials/consent\n"
                        "   ‚Ä¢ ƒê·∫£m b·∫£o User Type = 'External'\n"
                        "   ‚Ä¢ Publishing status = 'In production' HO·∫∂C th√™m email c·ªßa b·∫°n v√†o 'Test users'\n\n"
                        
                        "2Ô∏è‚É£ KI·ªÇM TRA CREDENTIALS:\n"
                        "   ‚Ä¢ Truy c·∫≠p: https://console.cloud.google.com/apis/credentials\n"
                        "   ‚Ä¢ Ch·ªçn OAuth 2.0 Client ID c·ªßa b·∫°n\n"
                        "   ‚Ä¢ Trong 'Authorized redirect URIs', th√™m:\n"
                        "     - http://localhost:8080/\n"
                        "     - http://localhost:8090/\n"
                        "     - http://localhost:8888/\n"
                        "     - http://127.0.0.1:8080/\n\n"
                        
                        "3Ô∏è‚É£ L√ÄM M·ªöI SETUP:\n"
                        "   ‚Ä¢ X√≥a file token.pickle (n·∫øu c√≥)\n"
                        "   ‚Ä¢ T·∫£i l·∫°i credentials.json m·ªõi t·ª´ Google Cloud Console\n"
                        "   ‚Ä¢ Restart Streamlit app\n\n"
                        
                        "4Ô∏è‚É£ N·∫æU V·∫™N L·ªñI:\n"
                        "   ‚Ä¢ T·∫°o project m·ªõi trong Google Cloud Console\n"
                        "   ‚Ä¢ B·∫≠t Calendar API\n"
                        "   ‚Ä¢ T·∫°o OAuth credentials m·ªõi\n\n"
                        
                        f"üìù Chi ti·∫øt l·ªói: {str(e)}"
                    )
                    
                elif "port" in error_msg or "address already in use" in error_msg:
                    raise Exception(
                        "‚ùå Port Error: Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông server OAuth\n\n"
                        "üîß Gi·∫£i ph√°p:\n"
                        "1. ƒê√≥ng t·∫•t c·∫£ browser tabs c√≥ localhost:8080\n"
                        "2. Restart Streamlit app\n"
                        "3. Ho·∫∑c ch·∫°y l·ªánh: netstat -ano | findstr :8080 ƒë·ªÉ ki·ªÉm tra port\n\n"
                        f"Chi ti·∫øt: {str(e)}"
                    )
                    
                else:
                    raise Exception(f"‚ùå Google Auth Error: {str(e)}")
        
        # L∆∞u credentials cho l·∫ßn ch·∫°y ti·∫øp theo
        with open(token_file, 'wb') as token:
            pickle.dump(creds, token)
    
    # T·∫°o service object
    service = build('calendar', 'v3', credentials=creds)
    return service

def get_calendar_service():
    """
    Helper function ƒë·ªÉ l·∫•y calendar service.
    S·ª≠ d·ª•ng global variable ƒë·ªÉ tr√°nh ph·∫£i x√°c th·ª±c l·∫°i nhi·ªÅu l·∫ßn.
    """
    global _calendar_service
    if '_calendar_service' not in globals() or _calendar_service is None:
        try:
            _calendar_service = authenticate_google()
        except Exception as e:
            # Reset global variable if authentication fails
            _calendar_service = None
            raise e
    return _calendar_service

def reset_google_auth():
    """
    Reset Google authentication by removing stored tokens.
    Useful when OAuth flow encounters errors.
    """
    token_file = os.getenv('GOOGLE_TOKEN_FILE', 'token.pickle')
    if os.path.exists(token_file):
        try:
            os.remove(token_file)
            return f"‚úÖ ƒê√£ x√≥a {token_file}. Vui l√≤ng th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i."
        except Exception as e:
            return f"‚ùå Kh√¥ng th·ªÉ x√≥a {token_file}: {str(e)}"
    else:
        return f"‚ÑπÔ∏è File {token_file} kh√¥ng t·ªìn t·∫°i."

def validate_credentials_file():
    """
    Validate that the credentials.json file exists and is properly formatted.
    """
    credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    
    if not os.path.exists(credentials_file):
        return False, f"‚ùå Kh√¥ng t√¨m th·∫•y file {credentials_file}"
    
    try:
        import json
        with open(credentials_file, 'r') as f:
            creds_data = json.load(f)
            
        # Check if it has the required structure
        if 'installed' not in creds_data:
            return False, "‚ùå File credentials.json kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (thi·∫øu 'installed' key)"
            
        required_fields = ['client_id', 'client_secret', 'redirect_uris']
        for field in required_fields:
            if field not in creds_data['installed']:
                return False, f"‚ùå File credentials.json thi·∫øu field '{field}'"
        
        return True, "‚úÖ File credentials.json h·ª£p l·ªá"
        
    except json.JSONDecodeError:
        return False, "‚ùå File credentials.json kh√¥ng ph·∫£i JSON h·ª£p l·ªá"
    except Exception as e:
        return False, f"‚ùå L·ªói ƒë·ªçc credentials.json: {str(e)}"
